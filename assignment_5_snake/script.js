import config from "./config.js";
import SnakeGameState from "./snake_game_state.js";

class SnakeManager{
    static game;
    static isRunning = false;
    static speedValue = 100;
    static saveFunc; // variable used to save return value of setInterval() to be able to clear it.

    
    constructor(){
        if(['', null].includes(localStorage.getItem(config.maxScoreKey))) // Make sure we have max_score key:value initialized
            localStorage.setItem(config.maxScoreKey, '0');
        // Initialize game
        SnakeManager.game = new SnakeGameState(config.numRows, config.numColumns, config.rectSize, config.snakeState, document.getElementById(config.screenElemID));
        // Memorize whether game is currently running to avoid errors generated by pressing buttons many times.
        SnakeManager._addSpeedControl();
        SnakeManager._addGameControls();
        SnakeManager._addKeyListeners();
    }

    static displayResult(score){
        let displayText = 'You died!\nYour score: ' + score + '\nRecord score: ' + SnakeGameState.getMaxScore(); 
        alert(displayText);
    }

    static playOnce(){ // Advances game by one step
        let result = SnakeManager.game.playOneStep();
        if(result != -1){
            SnakeManager.isRunning = false;
            SnakeManager.reset();
            SnakeManager.displayResult(result);
        }
    }

    static startPlaying(){ // Set interval and start playing again
        if(!SnakeManager.isRunning){
            SnakeManager.isRunning = true;
            SnakeManager.saveFunc = setInterval(SnakeManager.playOnce, SnakeManager.speedValue);
        }
    }

    static reset(){ // Stop playing game and get game state ready for the new SnakeManager.game
        SnakeManager.isRunning = false; // No need to check. Stop can be called even if game is paused or reset already.
        clearInterval(SnakeManager.saveFunc);
        SnakeManager.game.stopGame();
        let newRows = document.getElementById(config.rowInputID).value;
        let newCols = document.getElementById(config.colInputID).value;
        if(isNaN(newRows) || isNaN(newCols) || newRows < 10 || newCols < 10 || newRows > 40 || newCols > 100){
            newRows = config.numRows;
            newCols = config.numColumns;
        }
        const screen = document.getElementById(config.screenElemID);
        screen.style.height = (23 + config.rectSize * newRows) + 'px';
        screen.style.width = (23 + config.rectSize * newCols) + 'px';
    
        SnakeManager.game = new SnakeGameState(newRows, newCols, config.rectSize, config.snakeState, document.getElementById(config.screenElemID));
    }

    static pauseGame(){ // Stop playing game, but don't change game state
        if(SnakeManager.isRunning){
            SnakeManager.isRunning = false;
            clearInterval(SnakeManager.saveFunc);
        }
    }

    static _addSpeedControl(){
        const speedInput = document.getElementById(config.speedInputID);
        speedInput.addEventListener('click', function(){
            const newSpeed = document.getElementById(config.speedInputID).value;
            SnakeManager.speedValue = 150 - 10 * newSpeed;
            if(SnakeManager.isRunning){
                clearInterval(SnakeManager.saveFunc);
                SnakeManager.saveFunc = setInterval(SnakeManager.playOnce, SnakeManager.speedValue);
            }
        });
    }

    static _addGameControls(){
        const startButton = document.getElementById('start-button');
        startButton.addEventListener('click', function(){
            SnakeManager.startPlaying();
        });
        const resetButton = document.getElementById('reset-button');
        resetButton.addEventListener('click', function(){
            SnakeManager.reset();
        });
        const pauseButton = document.getElementById('pause-button');
        pauseButton.addEventListener('click', function(){
            SnakeManager.pauseGame();
        });
    }

    static _addKeyListeners(){
        document.addEventListener('keydown', logKey); // Add arrow command functionality to the game
        function logKey(e){
            const curKey = `${e.code}`;
            if([config.dirTop, config.dirDown, config.dirLeft, config.dirRight].includes(curKey)){
                SnakeManager.game.updateDirection(curKey);
            } else {
                switch(curKey){
                    case 'KeyP':
                        SnakeManager.pauseGame();
                        break;
                    case 'KeyS':
                        SnakeManager.startPlaying();
                        break;
                    case 'KeyR':
                        SnakeManager.reset();
                        break;
                }
            }
        };
    }
}

const newGame = new SnakeManager();