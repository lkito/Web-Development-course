import config from "./config.js";
import SnakeGameState from "./snake_game_state.js";


if(['', null].includes(localStorage.getItem(config.maxScoreKey))) // Make sure we have max_score key:value initialized
    localStorage.setItem(config.maxScoreKey, '0');
// Initialize game
var game = new SnakeGameState(config.numRows, config.numColumns, config.rectSize, config.snakeState, document.getElementById(config.screenElemID));
// Memorize whether game is currently running to avoid errors generated by pressing buttons many times.
var isRunning = false;
var speedValue = 100;


//                                                  INITIALIZATION OF USER CONTROLS BELOW THIS LINE

function displayResult(score){
    let displayText = 'You died!\nYour score: ' + score + '\nRecord score: ' + SnakeGameState.getMaxScore(); 
    alert(displayText);
}

function playOnce(){ // Advances game by one step
    let result = game.playOneStep();
    if(result != -1){
        isRunning = false;
        reset();
        displayResult(result);
    }
}

var saveF; // variable used to save return value of setInterval() to be able to clear it.

function startPlaying(){ // Set interval and start playing again
    if(!isRunning){
        isRunning = true;
        saveF = setInterval(playOnce, speedValue);
    }
}
function reset(){ // Stop playing game and get game state ready for the new game
    isRunning = false; // No need to check. Stop can be called even if game is paused or reset already.
    clearInterval(saveF);
    game.stopGame();
    let newRows = document.getElementById(config.rowInputID).value;
    let newCols = document.getElementById(config.colInputID).value;
    if(isNaN(newRows) || isNaN(newCols) || newRows < 10 || newCols < 10 || newRows > 60 || newCols > 100){
        newRows = config.numRows;
        newCols = config.numColumns;
    }
    const screen = document.getElementById(config.screenElemID);
    screen.style.height = (23 + config.rectSize * newRows) + 'px';
    screen.style.width = (23 + config.rectSize * newCols) + 'px';

    game = new SnakeGameState(newRows, newCols, config.rectSize, config.snakeState, document.getElementById(config.screenElemID));
}
function pauseGame(){ // Stop playing game, but don't change game state
    if(isRunning){
        isRunning = false;
        clearInterval(saveF);
    }
}
const speedInput = document.getElementById(config.speedInputID);
speedInput.addEventListener('click', function(){
    const newSpeed = document.getElementById(config.speedInputID).value;
    speedValue = 150 - 10 * newSpeed;
    if(isRunning){
        clearInterval(saveF);
        saveF = setInterval(playOnce, speedValue);
    }
});
const startButton = document.getElementById('start-button');
startButton.addEventListener('click', function(){
    startPlaying();
});
const resetButton = document.getElementById('reset-button');
resetButton.addEventListener('click', function(){
    reset();
});
const pauseButton = document.getElementById('pause-button');
pauseButton.addEventListener('click', function(){
    pauseGame();
});

document.addEventListener('keydown', logKey); // Add arrow command functionality to the game
function logKey(e){
    const curKey = `${e.code}`;
    if([config.dirTop, config.dirDown, config.dirLeft, config.dirRight].includes(curKey)){
        game.updateDirection(curKey);
    } else {
        switch(curKey){
            case 'KeyP':
                pauseGame();
                break;
            case 'KeyS':
                startPlaying();
                break;
            case 'KeyR':
                reset();
                break;
        }
    }
};