import config from "./config.js";
import SnakeGameState from "./snake_game_state.js";


if(['', null].includes(localStorage.getItem(config.maxScoreKey))) // Make sure we have max_score key:value initialized
localStorage.setItem(config.maxScoreKey, '0');
// Initialize game
var game = new SnakeGameState(config.numRows, config.numColumns, config.rectSize, config.snakeState, document.getElementById(config.screenElemID));
// Memorize whether game is currently running to avoid errors generated by pressing buttons many times.
var isRunning = false;


document.addEventListener('keydown', logKey); // Add arrow command functionality to the game
function logKey(e){
    game.updateDirection(`${e.code}`);
};

function playOnce(){ // Function that does work
    game.playOneStep()
}

var saveF; // variable used to save return value of setInterval() to be able to clear it.

function startPlaying(){ // Set interval and start playing again
    if(!isRunning){
        isRunning = true;
        saveF = setInterval(playOnce, 300);
    }
}

function restart(){ // Stop playing game and get game state ready for the new game
    isRunning = false; // No need to check. Stop can be called even if game is paused or reset already.
    clearInterval(saveF);
    game.stopGame();
    game = new SnakeGameState(config.numRows, config.numColumns, config.rectSize, config.snakeState, document.getElementById(config.screenElemID));
}

function pauseGame(){ // Stop playing game, but don't change game state
    if(isRunning){
        isRunning = false;
        clearInterval(saveF);
    }
}


const startButton = document.getElementById('start-button');
startButton.addEventListener('click', function(){
    startPlaying();
});
const restartButton = document.getElementById('restart-button');
restartButton.addEventListener('click', function(){
    restart();
});
const pauseButton = document.getElementById('pause-button');
pauseButton.addEventListener('click', function(){
    pauseGame();
});